#!/usr/bin/env node

/**
 * Script pour mettre √† jour le repo WhytCard Discuss
 * Ce script effectue les actions suivantes :
 * 1. Met √† jour les r√©pertoires de langues
 * 2. Traduit tous les fichiers Markdown
 * 3. Optimise les fichiers pour GitHub
 * 4. Pr√©pare les commits
 */

const fs = require('fs').promises;
const path = require('path');
const { execSync } = require('child_process');
const readline = require('readline');

// Configuration
const ROOT_DIR = path.resolve(__dirname, '..');

// Fonction pour ex√©cuter une commande shell
function runCommand(command, options = {}) {
  console.log(`\n> ${command}\n`);
  return execSync(command, { 
    stdio: 'inherit', 
    cwd: options.cwd || ROOT_DIR,
    ...options 
  });
}

// Fonction pour demander confirmation
async function askConfirmation(question) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  return new Promise(resolve => {
    rl.question(`${question} (y/n): `, answer => {
      rl.close();
      resolve(answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes');
    });
  });
}

// Fonction pour v√©rifier les d√©pendances
async function checkDependencies() {
  console.log('üìã V√©rification des d√©pendances...');
  try {
    runCommand('npm --version', { stdio: 'ignore' });
  } catch (error) {
    console.error('‚ùå Node.js et npm doivent √™tre install√©s. Veuillez les installer avant de continuer.');
    process.exit(1);
  }

  try {
    // V√©rifier si les d√©pendances sont install√©es
    await fs.access(path.join(ROOT_DIR, 'node_modules'));
  } catch (error) {
    console.log('üì¶ Installation des d√©pendances...');
    runCommand('npm install');
  }
}

// Fonction pour configurer les r√©pertoires de langues
async function setupLanguageDirectories() {
  console.log('üåê Configuration des r√©pertoires de langues...');
  runCommand('node scripts/setup-languages.js');
}

// Fonction pour traduire les fichiers
async function translateFiles() {
  console.log('üîÑ Traduction des fichiers...');
  
  // V√©rifier si la variable d'environnement GOOGLE_APPLICATION_CREDENTIALS est d√©finie
  if (!process.env.GOOGLE_APPLICATION_CREDENTIALS) {
    console.warn('‚ö†Ô∏è  La variable d\'environnement GOOGLE_APPLICATION_CREDENTIALS n\'est pas d√©finie.');
    console.warn('‚ö†Ô∏è  La traduction automatique ne fonctionnera pas sans les identifiants Google Cloud.');
    
    const proceed = await askConfirmation('Voulez-vous continuer sans traduction?');
    if (!proceed) {
      console.log('‚ùå Op√©ration annul√©e.');
      process.exit(1);
    }
    return;
  }
  
  try {
    runCommand('npm run translate');
  } catch (error) {
    console.error('‚ùå Erreur lors de la traduction:', error);
  }
}

// Fonction pour optimiser les fichiers pour GitHub
async function optimizeForGitHub() {
  console.log('üîß Optimisation des fichiers pour GitHub...');
  
  // V√©rifier si le fichier README.md existe √† la racine
  try {
    await fs.access(path.join(ROOT_DIR, 'README.md'));
  } catch (error) {
    console.log('üìÑ Cr√©ation d\'un lien symbolique pour README.md...');
    // Copier le README.md de EN/ vers la racine s'il existe
    try {
      const enReadme = await fs.readFile(path.join(ROOT_DIR, 'EN', 'README.md'), 'utf8');
      await fs.writeFile(path.join(ROOT_DIR, 'README.md'), enReadme);
    } catch (error) {
      console.warn('‚ö†Ô∏è  Impossible de copier le README.md depuis EN/');
    }
  }
  
  // V√©rifier et cr√©er le fichier .gitattributes s'il n'existe pas
  try {
    await fs.access(path.join(ROOT_DIR, '.gitattributes'));
  } catch (error) {
    console.log('üìÑ Cr√©ation du fichier .gitattributes...');
    const gitattributes = `# Auto detect text files and perform LF normalization
* text=auto

# Documentation
*.md diff=markdown

# Linguist language overrides
*.js linguist-language=JavaScript
*.jsx linguist-language=JavaScript
*.ts linguist-language=TypeScript
*.tsx linguist-language=TypeScript
`;
    await fs.writeFile(path.join(ROOT_DIR, '.gitattributes'), gitattributes);
  }
}

// Fonction pour pr√©parer les commits
async function prepareCommits() {
  console.log('üìä Pr√©paration des commits...');
  
  try {
    // V√©rifier s'il y a des modifications √† committer
    const status = execSync('git status --porcelain', { encoding: 'utf8' });
    
    if (status.trim()) {
      console.log('üìù Modifications d√©tect√©es:');
      console.log(status);
      
      const commit = await askConfirmation('Voulez-vous committer ces modifications?');
      if (commit) {
        const commitMessage = 'Update: Mise √† jour automatique du repo';
        runCommand(`git add .`);
        runCommand(`git commit -m "${commitMessage}"`);
        
        const push = await askConfirmation('Voulez-vous pousser ces modifications vers GitHub?');
        if (push) {
          runCommand('git push');
          console.log('‚úÖ Modifications pouss√©es vers GitHub avec succ√®s!');
        }
      }
    } else {
      console.log('‚úÖ Aucune modification √† committer.');
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la pr√©paration des commits:', error);
  }
}

// Fonction principale
async function main() {
  console.log('üöÄ Mise √† jour du repo WhytCard Discuss...');
  
  try {
    await checkDependencies();
    await setupLanguageDirectories();
    await translateFiles();
    await optimizeForGitHub();
    await prepareCommits();
    
    console.log('\n‚úÖ Mise √† jour termin√©e avec succ√®s!');
  } catch (error) {
    console.error('\n‚ùå Erreur lors de la mise √† jour:', error);
    process.exit(1);
  }
}

// Ex√©cuter la fonction principale
main(); 